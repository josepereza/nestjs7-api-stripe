scalar Date

type OrderContact {
  name: String
  phone: String
}

type OrderCharge {
  currency: String
  totalAmount: Float
}

type Order {
  _id: ID!
  orderNo: String!
  date: Date
  # consignee: OrderContact
  contactAddress: String!
  # charge: OrderCharge!
  remarks: String
  # generated by mongoose {timestamp: true}
  createdAt: Date
  updatedAt: Date
}

input OrderContactInput {
  name: String
  phone: String
}

input OrderChargeInput {
  currency: String
  totalAmount: Float
}

input OrderCreateInput {
  date: Date
  consignee: OrderContactInput
  contactAddress: String
  charge: OrderChargeInput!
  remarks: String
}

input OrderUpdateDtoInput {
  date: Date
  consignee: OrderContactInput
  contactAddress: String
  charge: OrderChargeInput!
  remarks: String
}

input OrderSearchInput {
  q: String
  dateFr: Date
  dateTo: Date
  consigneeName: String
  consigneePhone: String
  contactAddress: String
  remarks: String
}

type Query {
  getOrder(id: ID!): Order
  getOrders(query: OrderSearchInput): [Order]
}

type Mutation {
  createOrder(orderCreateDto: OrderCreateInput!): Order
  updateOrder(id: ID!, orderUpdateDto: OrderUpdateDtoInput): Order
}
